generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  address   String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  orders    Order[]

  @@map("users")
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      AdminRole @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String?
  price           Float
  image           String?
  categoryId      String
  available       Boolean     @default(true)
  preparationTime Int         @default(15)
  ingredients     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id              String                @id @default(cuid())
  orderNumber     String                @unique
  userId          String
  status          OrderStatus           @default(PENDING)
  paymentStatus   PaymentStatus         @default(PENDING)
  paymentMethod   PaymentMethod?
  deliveryType    DeliveryType          @default(DELIVERY)
  totalAmount     Float
  deliveryFee     Float                 @default(0)
  discountAmount  Float                 @default(0)
  finalAmount     Float
  scheduledFor    DateTime?
  deliveryAddress String?
  customerPhone   String?
  notes           String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  notifications   NotificationHistory[]
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model PixConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  pixKey    String
  pixType   String
  recipient String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pix_configs")
}

model NotificationHistory {
  id        String           @id @default(cuid())
  orderId   String
  status    String
  type      NotificationType
  recipient String
  message   String
  sent      Boolean          @default(false)
  sentAt    DateTime?
  error     String?
  createdAt DateTime         @default(now())
  order     Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("notification_history")
}

enum UserRole {
  CLIENT
  ADMIN
}

enum AdminRole {
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  ONLINE
}

enum DeliveryType {
  DELIVERY
  PICKUP
}

enum NotificationType {
  WHATSAPP
  SMS
  EMAIL
  PUSH
}
