'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { X, Download, Chrome, Globe, Smartphone } from 'lucide-react'

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[]
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed'
    platform: string
  }>
  prompt(): Promise<void>
}

export default function SimpleInstallPopup() {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null)
  const [showPopup, setShowPopup] = useState(false)
  const [showInstructions, setShowInstructions] = useState(false)

  useEffect(() => {
    // Verificar se j√° foi dispensado
    const wasDismissed = localStorage.getItem('install-popup-dismissed')
    if (wasDismissed) {
      return
    }

    // Capturar evento de instala√ß√£o PWA
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault()
      setDeferredPrompt(e as BeforeInstallPromptEvent)
      setShowPopup(true)
    }

    // Mostrar popup ap√≥s 3 segundos se n√£o houver evento PWA
    const timer = setTimeout(() => {
      if (!deferredPrompt) {
        setShowPopup(true)
      }
    }, 3000)

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
      clearTimeout(timer)
    }
  }, [deferredPrompt])

  const handleInstall = async () => {
    if (deferredPrompt) {
      // Instala√ß√£o PWA nativa
      await deferredPrompt.prompt()
      const { outcome } = await deferredPrompt.userChoice
      
      if (outcome === 'accepted') {
        console.log('App instalado com sucesso!')
        setShowPopup(false)
      }
      
      setDeferredPrompt(null)
    } else {
      // Mostrar instru√ß√µes detalhadas
      setShowInstructions(true)
    }
  }

  const handleClose = () => {
    setShowPopup(false)
    setShowInstructions(false)
    localStorage.setItem('install-popup-dismissed', 'true')
  }

  const getBrowserInstructions = () => {
    const userAgent = navigator.userAgent.toLowerCase()
    
    if (userAgent.includes('chrome')) {
      return {
        icon: <Chrome className="w-5 h-5" />,
        title: "Google Chrome",
        steps: [
          "1. Clique no √≠cone ‚ö° ou üì± na barra de endere√ßo",
          "2. Clique em 'Instalar aplicativo' ou 'Install'",
          "3. Confirme a instala√ß√£o",
          "4. O app aparecer√° na sua √°rea de trabalho"
        ]
      }
    } else if (userAgent.includes('safari')) {
      return {
        icon: <Smartphone className="w-5 h-5" />,
        title: "Safari (iPhone/iPad)",
        steps: [
          "1. Clique no √≠cone de Compartilhar üì§",
          "2. Role para baixo e clique em 'Adicionar √† Tela Inicial'",
          "3. Confirme clicando em 'Adicionar'",
          "4. O app aparecer√° na sua tela inicial"
        ]
      }
    } else if (userAgent.includes('firefox')) {
      return {
        icon: <Globe className="w-5 h-5" />,
        title: "Mozilla Firefox",
        steps: [
          "1. Clique no menu ‚ò∞ (tr√™s linhas)",
          "2. Selecione 'Instalar PWA' ou 'Install this site as an app'",
          "3. Confirme a instala√ß√£o",
          "4. O app ser√° instalado no seu dispositivo"
        ]
      }
    } else {
      return {
        icon: <Download className="w-5 h-5" />,
        title: "Navegador Desconhecido",
        steps: [
          "1. Procure por op√ß√µes de instala√ß√£o no menu do navegador",
          "2. Busque por 'Instalar como app' ou 'Add to Home Screen'",
          "3. Siga as instru√ß√µes do seu navegador",
          "4. Se precisar, tente usar Chrome ou Safari"
        ]
      }
    }
  }

  const browserInfo = getBrowserInstructions()

  if (!showPopup) return null

  if (showInstructions) {
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg shadow-2xl max-w-md w-full p-6 relative">
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClose}
            className="absolute top-4 right-4 h-8 w-8 p-0 hover:bg-gray-100"
          >
            <X className="w-4 h-4" />
          </Button>
          
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-yellow-400 to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4">
              <img
                src="/logo.png"
                alt="AeroPizza Logo"
                className="w-10 h-10 object-contain"
              />
            </div>
            <h3 className="text-xl font-bold text-black mb-2">Instale o AeroPizza</h3>
            <p className="text-gray-600 text-sm">Siga as instru√ß√µes para seu navegador:</p>
          </div>

          <div className="mb-6">
            <div className="flex items-center space-x-2 mb-4">
              {browserInfo.icon}
              <h4 className="font-semibold text-black">{browserInfo.title}</h4>
            </div>
            <div className="space-y-2">
              {browserInfo.steps.map((step, index) => (
                <div key={index} className="flex items-start space-x-2">
                  <span className="text-yellow-500 font-bold text-sm mt-0.5">{index + 1}.</span>
                  <p className="text-sm text-gray-700">{step}</p>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
            <p className="text-xs text-yellow-800">
              <strong>Benef√≠cios:</strong> Acesso r√°pido, notifica√ß√µes, funciona offline, experi√™ncia de app nativo!
            </p>
          </div>

          <Button
            onClick={handleClose}
            className="w-full bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-500 hover:to-yellow-600 text-black font-bold"
          >
            Entendido
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 animate-in slide-in-from-bottom-4 duration-300">
      <div className="bg-white rounded-lg shadow-2xl border-2 border-yellow-400 p-4 flex items-center space-x-3 max-w-sm">
        {/* √çcone - Logo AeroPizza */}
        <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-500 rounded-lg flex items-center justify-center flex-shrink-0">
          <img
            src="/logo.png"
            alt="AeroPizza Logo"
            className="w-8 h-8 object-contain"
          />
        </div>
        
        {/* Texto */}
        <div className="flex-1">
          <h3 className="font-bold text-black text-sm">Instale nosso app!</h3>
          <p className="text-xs text-gray-600">Tenha o AeroPizza sempre √† m√£o</p>
        </div>
        
        {/* Bot√µes */}
        <div className="flex items-center space-x-2">
          <Button
            onClick={handleInstall}
            size="sm"
            className="bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-500 hover:to-yellow-600 text-black font-bold text-xs px-3"
          >
            {deferredPrompt ? 'Instalar' : 'Como?'}
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClose}
            className="h-8 w-8 p-0 hover:bg-gray-100"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  )
}